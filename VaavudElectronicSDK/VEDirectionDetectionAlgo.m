//
//  DirectionDetectionAlgo.m
//  VaavudElectronicsTest
//
//  Created by Andreas Okholm on 11/06/14.
//  Copyright (c) 2014 Vaavud. All rights reserved.
//

#import "VEDirectionDetectionAlgo.h"
//#define TEETH_PR_REV 10
#define TEETH_PR_REV 15
#define SAMPLE_BUFFER_SIZE 40
#define UPDATE_INTERVAL 0.2 // 5 times a second
#define ANGLE_CORRRECTION_COEFFICIENT 100 // originally 400 (but since actual velocity difference is about double...
#define ANGLE_DIFF 1
#define SMOOTHING_TIME_CONSTANT 4
#define SAMPLE_FREQUENCY 44100


@interface VEDirectionDetectionAlgo() {
    
    unsigned int totalTickCounter;
    unsigned int teethIndex;
    unsigned int tickCounterSinceStart;
    unsigned int teethProcessIndex;
    unsigned int tickBufferCounter;
    unsigned int lastTickBufferCounter;
    unsigned int startCounter;
    
    int tickLengthBuffer[TEETH_PR_REV];
    int tickLengthOneRotation;
    float expTickLengthRelativePrTeeth[TEETH_PR_REV];
    
    double nextRefreshTime;
    BOOL startLocated;
    BOOL initializeExponentialFilter;
    int lastTickLength;
    float lastTickLengthCompensated;
    int tickEdgeAngle[TEETH_PR_REV]; // add one point in ether end
    int angleEstimator;
    
    int iteratorAngleCounter;
}

@property (strong, nonatomic) id<DirectionDetectionDelegate> dirDelegate;

@end


@implementation VEDirectionDetectionAlgo


float compensation[TEETH_PR_REV] = {1.02127659574468,1.02127659574468,1.02127659574468,1.02127659574468,1.02127659574468,1.02127659574468,1.02127659574468,1.02127659574468,1.02127659574468,1.02127659574468,1.02127659574468,1.02127659574468,1.02127659574468,1.02127659574468,0.774193548387097};

//float compensation2[TEETH_PR_REV] = {1.36642200028858,1.14663273821641,-2.17037166831898,-1.25544425914286,-3.09283096100997,1.03853721398508,1.00103346210481,5.38022993669676,-2.62548084741271,1.81677551601541,-3.58838920481080,1.02778809390994,-1.05007481464095,1.76916037125822,-0.763987577138973};
//
//float compensation3[TEETH_PR_REV] = {0.482503210666667,0.257373151333333,0.318363569333333,0.383400920666667,0.469710791333333,0.653712393333333,0.0889313200000000,0.322430538000000,-0.0822921500000000,-0.624701627333333,-0.254397380000000,-0.132323110000000,-0.451682820000000,-0.298732492666667,-0.227766400000000};


//float compensationT1[TEETH_PR_REV] = {0.5673,0.3535,0.2140,-0.4933,-0.9837,-0.9791,-0.3582,-0.0840,0.5141,1.1365,1.1198,-0.1993,-0.0819,-0.0614,-0.6642};

//float compensationT1[TEETH_PR_REV] = {0.255313870261152,-1.06321284790957,-1.85809500396847,-0.485670500175613,0.304926712381872,0.731881867917250,1.45702351021075,1.30215137451077,1.21273480907476,0.686947775212225,0.0957051710857151,-0.902816536905571,-0.308586035140004,-0.288909983469392,-1.13939418308586};
//float compentationT1Ispo[TEETH_PR_REV] = {0.326978570833333,-0.299902298333333,-0.676498258333333,-1.62413215833333,-1.62867459833333,-1.56009190000000,-0.425381556666667,0.630586347500000,0.639615490000000,0.855704600000000,0.754921124166667,0.123426450000000,0.943220616666667,1.34049741666667,0.454642833333333};
//
//float compensationS12[TEETH_PR_REV] = {2.45987670000000,0.800626565000000,0.588490516666667,-0.935374225000000,-0.560158465833333,-0.328313783333333,0.122647412500000,0.264504658333333,-0.127888691666667,-0.258119426666667,-0.158305491666667,-1.92416610000000,0.0561986100000000,-0.175370266666667,0.132928903250000};

//float fitcurveCAD[360] = {0.492458649,0.475097354,0.457163957,0.43815945,0.417886639,0.396242588,0.373193991,0.348732732,0.322879916,0.295672578,0.267183381,0.237489337,0.206641721,0.174677409,0.141600479,0.107406628,0.07209709,0.035688557,-0.001736149,-0.040075612,-0.07923396,-0.119129452,-0.159740474,-0.201061524,-0.243077494,-0.285760295,-0.329033628,-0.372803527,-0.416960496,-0.461402046,-0.506079352,-0.550959589,-0.596012058,-0.641196554,-0.686428389,-0.7316121,-0.776658427,-0.821486639,-0.86604414,-0.910288407,-0.954188159,-0.997700711,-1.04073065,-1.083175145,-1.12494851,-1.16598175,-1.206248783,-1.245730511,-1.284401833,-1.322222309,-1.35911024,-1.394980303,-1.429757641,-1.463384106,-1.495839109,-1.527106984,-1.557169943,-1.585997072,-1.613529906,-1.639696711,-1.664406959,-1.687601625,-1.709282576,-1.729457027,-1.74813003,-1.765282558,-1.780859427,-1.794803517,-1.807059467,-1.817581803,-1.826338197,-1.833321748,-1.838553517,-1.84204704,-1.843804633,-1.843792211,-1.841944468,-1.838249925,-1.832745295,-1.825473679,-1.816480633,-1.80579389,-1.793427007,-1.779377851,-1.763635502,-1.746202119,-1.727092459,-1.706365053,-1.68409811,-1.660337682,-1.635109964,-1.608412061,-1.580235053,-1.550616518,-1.519614761,-1.487298201,-1.453736585,-1.418986229,-1.383093725,-1.346079822,-1.307958645,-1.268751389,-1.228494188,-1.187278554,-1.145207708,-1.102372253,-1.058842387,-1.014624021,-0.969715571,-0.924141562,-0.877944757,-0.831209266,-0.78402377,-0.736464629,-0.688598276,-0.640468694,-0.592115358,-0.543576794,-0.494899106,-0.44614985,-0.397404684,-0.348751134,-0.300263472,-0.251976054,-0.203912713,-0.156086855,-0.10852055,-0.061262099,-0.014363334,0.032125377,0.078156936,0.123691932,0.168700214,0.213172016,0.257094806,0.300440905,0.343184169,0.385308604,0.426806622,0.467688543,0.507964995,0.547639562,0.58670484,0.625126162,0.662869708,0.699917607,0.73625826,0.771890291,0.806812245,0.841016494,0.874493663,0.907232597,0.939221704,0.970449152,1.000900762,1.030553985,1.059385444,1.087375959,1.114505087,1.140742981,1.166060005,1.190438161,1.213862209,1.236314756,1.257776959,1.278225832,1.297633722,1.315954517,1.333135258,1.349119955,1.363855799,1.377318038,1.389494105,1.400378159,1.409951801,1.418076094,1.424530067,1.428874321,1.430639695,1.430122786,1.428011813,1.424680913,1.420303899,1.414930331,1.408532526,1.401097839,1.392624121,1.383096477,1.37249209,1.360817791,1.348104446,1.334379409,1.319665819,1.303975728,1.287311211,1.269681735,1.251104507,1.231593603,1.211159378,1.189813449,1.167569322,1.144447977,1.120479517,1.095694423,1.07012312,1.043804911,1.016791552,0.989133975,0.960880318,0.932066647,0.902710394,0.872830775,0.842452803,0.811610204,0.780351071,0.748729377,0.716807246,0.684646888,0.652308948,0.619847393,0.587303161,0.554717634,0.522136376,0.489608502,0.457189654,0.42493216,0.392879086,0.361074674,0.329568768,0.298422805,0.267723596,0.237553106,0.207972891,0.179032244,0.150757817,0.123176972,0.096327221,0.07024757,0.044976913,0.020561135,-0.002936205,-0.025457777,-0.046969061,-0.067447519,-0.086892,-0.105291043,-0.122598499,-0.138774737,-0.15381041,-0.167694295,-0.180398536,-0.191902979,-0.202213255,-0.211335348,-0.219266207,-0.225994202,-0.231489991,-0.235734227,-0.238738505,-0.240530984,-0.241168554,-0.240696271,-0.239120849,-0.236449199,-0.232701902,-0.227904392,-0.222088868,-0.215295326,-0.207579507,-0.198992345,-0.189568766,-0.179341391,-0.168342673,-0.156609304,-0.144187581,-0.131137561,-0.117546956,-0.103496067,-0.089040512,-0.074222947,-0.059064807,-0.043593933,-0.027858432,-0.011911511,0.004188358,0.020386066,0.036635476,0.05290363,0.069183898,0.085468723,0.101740721,0.117966516,0.134080232,0.15002522,0.165775284,0.18132632,0.196714689,0.211966194,0.227069861,0.241999243,0.25670392,0.271133347,0.285244656,0.299017463,0.312482338,0.325666375,0.338570125,0.351176947,0.363437404,0.375304993,0.386753264,0.397767313,0.40835403,0.418526516,0.428305101,0.437708505,0.446747839,0.455425806,0.463725206,0.471637854,0.479191402,0.486426988,0.493406718,0.500187139,0.506796072,0.513247318,0.519527751,0.525622405,0.531527514,0.537247267,0.542804947,0.548221221,0.553493734,0.558608105,0.563524665,0.568203411,0.572624306,0.576775653,0.580660011,0.584271312,0.587555089,0.590442236,0.592853185,0.594707773,0.595934991,0.596475777,0.596313552,0.595435733,0.593792844,0.591320567,0.587934721,0.58354927,0.578099024,0.571531296,0.563824527,0.554976375,0.545033796,0.53411216,0.522618315,0.51106101};


float fitcurve[360]  = {1.93055056304272,1.92754159835895,1.92282438491601,1.91642240663535,1.90836180821769,1.89867136590046,1.88738243346175,1.87452883370120,1.86014676759279,1.84427478518094,1.82695377850290,1.80822697586826,1.78813992874676,1.76674047747091,1.74407866757061,1.72020656030400,1.69517800715690,1.66904843699963,1.64187464950645,1.61371462647876,1.58462740924956,1.55467305246007,1.52391260026944,1.49240801962532,1.46022202221808,1.42741784194637,1.39405900931661,1.36020913199620,1.32593169153717,1.29128981914961,1.25634600129292,1.22116175831135,1.18579734303049,1.15031150113437,1.11476127584804,1.07920182312177,1.04368623722990,1.00826539680125,0.972987817770956,0.937899532389511,0.903043996582429,0.868462039649354,0.834191843341422,0.800268955749256,0.766726343538812,0.733594507605786,0.700901592353379,0.668673415622578,0.636933467547068,0.605702923030820,0.575000695079098,0.544843511789263,0.515245997694165,0.486220761974393,0.457778504155552,0.429928136760471,0.402676934592876,0.376030705291920,0.349993988555626,0.324570272343151,0.299762224554410,0.275571929569200,0.252001097395764,0.229051207572156,0.206723638918024,0.185019804046930,0.163941295536526,0.143490058746097,0.123668551764306,0.104479853075893,0.0859277278556616,0.0680166393704737,0.0507517558714560,0.0341389996545297,0.0181851042532520,0.00289764968455452,-0.0117149087765697,-0.0256432058939759,-0.0388769297985376,-0.0514047989025574,-0.0632145881998666,-0.0742932098523405,-0.0846268105605133,-0.0942008705954160,-0.103000306115350,-0.111009589516615,-0.118212913029394,-0.124594370818823,-0.130138144991804,-0.134828678151935,-0.138650863623146,-0.141589940836392,-0.143631982613669,-0.144763880519847,-0.144973663286989,-0.144250763791977,-0.142586242357516,-0.139972901415060,-0.136405374393993,-0.131880243512971,-0.126396155480609,-0.119953903391895,-0.112556485929105,-0.104209142607944,-0.0949193873907413,-0.0846970613071941,-0.0735543869171775,-0.0615060081531991,-0.0485690247473594,-0.0347630384066071,-0.0201102291169421,-0.00463544268113327,0.0116337222903312,0.0286668458970663,0.0464306654552773,0.0648890733800766,0.0840031184656525,0.103731019912623,0.124028212339776,0.144847424043910,0.166138809986866,0.187850105743243,0.209926771139125,0.232312099871980,0.254947302034379,0.277771580177066,0.300722214300621,0.323734675998779,0.346742778934413,0.369678866423019,0.392474005660318,0.415058168415599,0.437360424725763,0.459309184877691,0.480832480534593,0.501858298006565,0.522314926262134,0.542131291505136,0.561237285624209,0.579564080503314,0.597044401632675,0.613612772959745,0.629205754062743,0.643762145476949,0.657223114636108,0.669532313041451,0.680636049606467,0.690483471159853,0.699026703209735,0.706220954402490,0.712024568042803,0.716399053179197,0.719309119720656,0.720722727690873,0.720611146548223,0.718949016219273,0.715714393715594,0.710888767907992,0.704457075805069,0.696407729977473,0.686732645873142,0.675427261400450,0.662490538243213,0.647924923861272,0.631736296292326,0.613933903685354,0.594530298066370,0.573541258916757,0.550985712714184,0.526885650621979,0.501266033241476,0.474154669767433,0.445582087732282,0.415581407568944,0.384188230396930,0.351440532507190,0.317378563602313,0.282044739176431,0.245483514902245,0.207741270922022,0.168866239711485,0.128908451253386,0.0879196798867660,0.0459533973687714,0.00306473704801602,-0.0406895385539698,-0.0852510874443092,-0.130560085653262,-0.176555352635537,-0.223174483926726,-0.270354003694408,-0.318029564779040,-0.366136150084997,-0.414608230085121,-0.463379905156156,-0.512385053863697,-0.561557494697062,-0.610831175836623,-0.660140375852816,-0.709419902462159,-0.758605275138057,-0.807632877266797,-0.856440096451739,-0.904965450293262,-0.953148676657088,-1.00093081662756,-1.04825431459765,-1.09506313749468,-1.14130292468632,-1.18692112548173,-1.23186707424668,-1.27609204040434,-1.31954926810789,-1.36219398618314,-1.40398339226546,-1.44487663036859,-1.48483477692865,-1.52382083785846,-1.56179973308302,-1.59873829611478,-1.63460528731700,-1.66937141578467,-1.70300935345337,-1.73549372023954,-1.76680103882706,-1.79690964091476,-1.82579956937042,-1.85345251794598,-1.87985178650518,-1.90498224798798,-1.92883034611430,-1.95138411094696,-1.97263317597833,-1.99256875417214,-2.01118351063343,-2.02847142222021,-2.04442770651076,-2.05904876934359,-2.07233212953319,-2.08427634067406,-2.09488092934612,-2.10414633918689,-2.11207385653047,-2.11866550063715,-2.12392392855818,-2.12785235294625,-2.13045446941802,-2.13173440166218,-2.13169662774024,-2.13034586385060,-2.12768694358104,-2.12372472526967,-2.11846404796602,-2.11190978398746,-2.10406693046473,-2.09494070314769,-2.08453657856423,-2.07286020228535,-2.05991724573168,-2.04571329439890,-2.03025381011404,-2.01354409660671,-1.99558925551097,-1.97639417257405,-1.95596358148356,-1.93430215219623,-1.91141456498716,-1.88730558353145,-1.86198014106267,-1.83544343461144,-1.80770102675171,-1.77875894897603,-1.74862377338231,-1.71730261999106,-1.68480317756577,-1.65113374186939,-1.61630326967538,-1.58032147957387,-1.54319899451728,-1.50494750075179,-1.46557986180280,-1.42511011063198,-1.38355342912957,-1.34092621637585,-1.29724617853082,-1.25253238496823,-1.20680533995027,-1.16008712948684,-1.11240159666417,-1.06377448238627,-1.01423346987064,-0.963808178076644,-0.912530147553338,-0.860432823915887,-0.807551534849895,-0.753923437647436,-0.699587397418073,-0.644583841616784,-0.588954623685606,-0.532742913754490,-0.475993148906732,-0.418751007243797,-0.361063391962615,-0.302978414524606,-0.244545320336948,-0.185814388853583,-0.126836850407010,-0.0676648561212342,-0.00835148845376236,0.0510492170666441,0.110482255689112,0.169891654855290,0.229220498160153,0.288410989747835,0.347404532745552,0.406141804216642,0.464562841859978,0.522607165069588,0.580213909827325,0.637321971379807,0.693870171239719,0.749797447763799,0.805043053132515,0.859546740347051,0.913248923637761,0.966090812760156,1.01801450649125,1.06896306768950,1.11888059184822,1.16771228860579,1.21540460253994,1.26190534933332,1.30716384843168,1.35113103633228,1.39375955096661,1.43500380728303,1.47482010511715,1.51316681498404,1.55000456748550,1.58529639518708,1.61900783540342,1.65110697646223,1.68156447603108,1.71035356279630,1.73745001850842,1.76283212588682,1.78648061977600,1.80837868058991,1.82851194497160,1.84686852509262,1.86343902222370,1.87821647622575,1.89119628770111,1.90237616864563,1.91175616824101,1.91933872768542,1.92512873506254,1.92913358874019,1.93136328313521,1.93183048501708};


#pragma mark - Initialization
-(id)init {
    @throw [NSException exceptionWithName:NSInternalInconsistencyException
                                   reason:@"-init is not a valid initializer for the class DirectionDetectionAlgo"
                                 userInfo:nil];
    return nil;
}

- (id) initWithDelegate:(id<DirectionDetectionDelegate>)delegate {
    
    
    self = [super init];
    self.dirDelegate = delegate;
    nextRefreshTime = CACurrentMediaTime();
    startLocated = false;
    initializeExponentialFilter = true;
    
    for (int i = 0; i < TEETH_PR_REV; i++) {
//        compensation[i] = compensation[i]*(-compentationT1Ispo[i]/100+1);
    }
    
    
    float stdTickSize = 23.5;
    
    tickEdgeAngle[0] = 0;
    for (int i = 1; i < TEETH_PR_REV-1; i++) {
        tickEdgeAngle[i] = (int) (stdTickSize*i); // shift array one to the right
    }
    
    tickEdgeAngle[TEETH_PR_REV-1] = (int) (360-stdTickSize);
    
    for (int i = 0 ; i < TEETH_PR_REV; i++) {
        NSLog(@"angle:%d", tickEdgeAngle[i]);
    }
    
    return self;
}


- (void) newTick:(int)tickLength {
    
    // first try to locate the starting position (large tick)
    if (!startLocated) {
        [self locateStart:tickLength];
        lastTickLength = tickLength;
        return;
    }
    
    // check if new tick value is within 20% of expected value
    
    float tickLengthCompensated = tickLength * compensation[teethIndex];
    
    if (tickLengthCompensated > 0.8 * lastTickLengthCompensated && tickLengthCompensated < 1.2 * lastTickLengthCompensated) {
        
        [self processValidTick:tickLength];
        
    } else {
        
        NSLog(@"Out of ratio: %f", tickLengthCompensated / ((float) lastTickLengthCompensated));
        
        // reset buffers
        for (int i = 0; i < TEETH_PR_REV; i++) {
            tickLengthBuffer[i] = 0;
        }
        tickLengthOneRotation = 0;
        tickCounterSinceStart = 0;
        startLocated = false;
        initializeExponentialFilter = false;
    }
    
    lastTickLengthCompensated = tickLengthCompensated;
    
    
}



- (void) processValidTick:(int)tickLength {
    
    tickCounterSinceStart ++;
    
    // update tickLenghtOneRotation
    
    // Moving Avg subtract
    tickLengthOneRotation -= tickLengthBuffer[teethIndex];
    
    // Moving avg Update buffer value
    tickLengthBuffer[teethIndex] = tickLength;
    
    // Moving Avg update SUM
    tickLengthOneRotation += tickLengthBuffer[teethIndex];
    
    // initialize coefficients  Stuff
    if (tickCounterSinceStart == TEETH_PR_REV && initializeExponentialFilter) {
        for (int i=0; i< TEETH_PR_REV; i++) {
            expTickLengthRelativePrTeeth[i] = tickLengthBuffer[i] * TEETH_PR_REV / (float) tickLengthOneRotation;
        }
    }
    
    if (tickCounterSinceStart > TEETH_PR_REV) {
        // calculate relative tick length
        float tickLengthRelative = tickLengthBuffer[teethProcessIndex] * TEETH_PR_REV / (float) tickLengthOneRotation;
        
        float a_smoothingFactor = 3 *  tickLengthBuffer[teethProcessIndex] * TEETH_PR_REV / (float) ( SMOOTHING_TIME_CONSTANT * SAMPLE_FREQUENCY);
        
        expTickLengthRelativePrTeeth[teethProcessIndex] = a_smoothingFactor * tickLengthRelative + (1 - a_smoothingFactor) * expTickLengthRelativePrTeeth[teethProcessIndex];
        
        // update results
        if (CACurrentMediaTime() > nextRefreshTime) {
            [self updateUI];
            [self updateNextRefreshTime];
        }
        
    }
    
    
    teethIndex++;
    if (teethIndex == TEETH_PR_REV) {
        teethIndex = 0;
    }
    teethProcessIndex++;
    if (teethProcessIndex == TEETH_PR_REV) {
        teethProcessIndex = 0;
    }
    
    
}




- (void) locateStart:(int)samples{
    
    NSLog(@"Trying to locate start: Ratio: %f, StartCounter: %d", samples / ((float) lastTickLength), startCounter);
    
    if (samples > 1.2 * lastTickLength && samples < 1.4 * lastTickLength) {
        
        if (startCounter == 2* TEETH_PR_REV) {
            startLocated = true;
            lastTickLengthCompensated = samples * compensation[TEETH_PR_REV-1];
            NSLog(@"StartLocated: Ratio: %f, StartCounter: %d", samples / ((float) lastTickLength), startCounter);
            startCounter = 0;
            teethIndex = 0;
            teethProcessIndex = TEETH_PR_REV/2; // should be 7 for 15 teeth
        }
        
        if (startCounter % TEETH_PR_REV != 0 || startCounter > 2 * TEETH_PR_REV) {
            startCounter = 0;
        }
        
    }
    
    startCounter++;
    
}


- (void) updateNextRefreshTime {
    if (nextRefreshTime - UPDATE_INTERVAL < CACurrentMediaTime()) {
        nextRefreshTime = CACurrentMediaTime() + UPDATE_INTERVAL;
    }
    else {
        nextRefreshTime += UPDATE_INTERVAL;
    }
}





- (void) updateUI {
    
    float tickLengthRelativePrTeethCompensated[TEETH_PR_REV];
    
    // wrap tickLengthRelativePrTeethCompensated in Array
    NSMutableArray *angularVelocities = [[NSMutableArray alloc] initWithCapacity:TEETH_PR_REV];
    
    for (int i = 0; i < TEETH_PR_REV; i++) {
        tickLengthRelativePrTeethCompensated[i] = (expTickLengthRelativePrTeeth[i] * compensation[i] -1) * (-100); // - compensationS12[i]; // - compentationT1Ispo[i];
        [angularVelocities addObject: [NSNumber numberWithFloat: tickLengthRelativePrTeethCompensated[i]]];
    }
    
    // Calculate velocity for last revolution

    float windSpeed = 44100 / ((float)tickLengthOneRotation);
    
    [self iterateAngle: (float *) tickLengthRelativePrTeethCompensated];
    
    
    // See the Thread Safety warning above, but in a nutshell these callbacks happen on a separate audio thread. We wrap any UI updating in a GCD block on the main thread to avoid blocking that audio flow.
    dispatch_async(dispatch_get_main_queue(),^{
        [self.dirDelegate newWindAngleLocal:[NSNumber numberWithFloat:angleEstimator]];
        [self.dirDelegate newAngularVelocities: angularVelocities];
        [self.dirDelegate newSpeed: [NSNumber numberWithFloat:windSpeed]];
    });
    
}


- (void) iterateAngle: (float *) mvgRelativeSpeedPercent {
    
       // SMALL NOTICE (ANGLES IN USE ARE EDGE ANGLES, MIGHT BE BETTER TO CALCULATE EXCATE ANGLES!)
    
    if (iteratorAngleCounter == 5) {
        [self checkOppositeAngle: mvgRelativeSpeedPercent];
        iteratorAngleCounter = 0;
    }
    
    int angleLow = (angleEstimator - ANGLE_DIFF);
    int angleHigh = (angleEstimator + ANGLE_DIFF);
    
    if (angleLow < 0)
        angleLow += 360;
    
    if (angleHigh > 360)
        angleHigh -= 360;
    
    float angleLowSum = 0.0;
    float angleHighSum = 0.0;
    
    for (int i = 0; i < TEETH_PR_REV; i++) {  //NOW uses all points //starts at 1 and ends before last tick, to avoid errors based on these two.
        
        int signalExpectedIndexLow = tickEdgeAngle[i] - angleLow;
        if (signalExpectedIndexLow < 0)
            signalExpectedIndexLow += 360;
        
        int signalExpectedIndexHigh = tickEdgeAngle[i] - angleHigh;
        if (signalExpectedIndexHigh < 0)
            signalExpectedIndexHigh += 360;
        
        angleLowSum += powf(fitcurve[signalExpectedIndexLow]-mvgRelativeSpeedPercent[i], 2.0);
        angleHighSum += powf(fitcurve[signalExpectedIndexHigh]-mvgRelativeSpeedPercent[i], 2.0);
    }
        
    float angleHLDiff = (angleLowSum - angleHighSum)/ (float) TEETH_PR_REV;
    angleEstimator += angleHLDiff * (ANGLE_CORRRECTION_COEFFICIENT);
    
    if (angleEstimator < 0)
        angleEstimator += 360;
    
    if (angleEstimator > 360)
        angleEstimator -= 360;
    
    iteratorAngleCounter++;
    
}


- (void) checkOppositeAngle: (float *) mvgRelativeSpeedPercent {
    
    // SMALL NOTICE (ANGLES IN USE ARE EDGE ANGLES, MIGHT BE BETTER TO CALCULATE EXCATE ANGLES!)
    
    int angleLow = (angleEstimator);
    int angleHigh = (angleEstimator + 180);
    
    if (angleLow < 0)
        angleLow += 360;
    
    if (angleHigh > 360)
        angleHigh -= 360;
    
    float angleLowSum = 0.0;
    float angleHighSum = 0.0;
    
    for (int i = 0; i < TEETH_PR_REV; i++) {
    //for (int i = 0; i < TEETH_PR_REV; i++) {
        
        int signalExpectedIndexLow = tickEdgeAngle[i] - angleLow;
        if (signalExpectedIndexLow < 0)
            signalExpectedIndexLow += 360;
        
        int signalExpectedIndexHigh = tickEdgeAngle[i] - angleHigh;
        if (signalExpectedIndexHigh < 0)
            signalExpectedIndexHigh += 360;
        
        angleLowSum += powf(fitcurve[signalExpectedIndexLow]-mvgRelativeSpeedPercent[i], 2.0);
        angleHighSum += powf(fitcurve[signalExpectedIndexHigh]-mvgRelativeSpeedPercent[i], 2.0);
    }

    if (angleLowSum > angleHighSum) {
        angleEstimator += 180;
    }
    
    if (angleEstimator > 360)
        angleEstimator -= 360;
    
}



//- (float) correctAngle:(float) angle {
//    if (angle < 0) {
//        angle += 360;
//    }
//    else if (angle > 360) {
//        angle -= 360;
//    }
//    return angle;
//}

+ (float *) getFitCurve {
    return fitcurve;
}

- (int *) getEdgeAngles {
    return tickEdgeAngle;
}

@end
